import { Connection, NotificationCallback } from "./Connection.js";
import { PoolConfiguration, QueryOptions, QueryResult, ScriptExecuteOptions, ScriptResult, StatementPrepareOptions } from "./definitions.js";
import { PreparedStatement } from "./PreparedStatement.js";
import { SafeEventEmitter } from "./SafeEventEmitter.js";
export declare class Pool extends SafeEventEmitter {
    private readonly _pool;
    private readonly _notificationListeners;
    private _notificationConnection?;
    readonly config: PoolConfiguration;
    constructor(config?: PoolConfiguration | string);
    /**
     * Returns number of connections that are currently acquired
     */
    get acquiredConnections(): number;
    /**
     * Returns number of unused connections in the pool
     */
    get idleConnections(): number;
    /**
     * Returns total number of connections in the pool regardless of whether they are idle or in use
     */
    get totalConnections(): number;
    /**
     * Obtains a connection from the connection pool
     */
    acquire(): Promise<Connection>;
    /**
     * Shuts down the pool and destroys all resources.
     */
    close(terminateWait?: number): Promise<void>;
    /**
     * Executes a script
     */
    execute(sql: string, options?: ScriptExecuteOptions): Promise<ScriptResult>;
    /**
     * Executes a query
     */
    query(sql: string, options?: QueryOptions): Promise<QueryResult>;
    prepare(sql: string, options?: StatementPrepareOptions): Promise<PreparedStatement>;
    release(connection: Connection): Promise<void>;
    listen(channel: string, callback: NotificationCallback): Promise<void>;
    unListen(channel: string): Promise<void>;
    unListenAll(): Promise<void>;
    protected _initNotificationConnection(): Promise<void>;
}
