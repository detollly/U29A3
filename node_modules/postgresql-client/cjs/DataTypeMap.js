"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalTypeMap = exports.DataTypeMap = void 0;
const BoolType_js_1 = require("./data-types/BoolType.js");
const BoxType_js_1 = require("./data-types/BoxType.js");
const ByteaType_js_1 = require("./data-types/ByteaType.js");
const CharType_js_1 = require("./data-types/CharType.js");
const CircleType_js_1 = require("./data-types/CircleType.js");
const DateType_js_1 = require("./data-types/DateType.js");
const Float4Type_js_1 = require("./data-types/Float4Type.js");
const Float8Type_js_1 = require("./data-types/Float8Type.js");
const Int2Type_js_1 = require("./data-types/Int2Type.js");
const Int4Type_js_1 = require("./data-types/Int4Type.js");
const Int8Type_js_1 = require("./data-types/Int8Type.js");
const JsonbType_js_1 = require("./data-types/JsonbType.js");
const JsonType_js_1 = require("./data-types/JsonType.js");
const LsegType_js_1 = require("./data-types/LsegType.js");
const NumericType_js_1 = require("./data-types/NumericType.js");
const OidType_js_1 = require("./data-types/OidType.js");
const PointType_js_1 = require("./data-types/PointType.js");
const TimestampType_js_1 = require("./data-types/TimestampType.js");
const TimestamptzType_js_1 = require("./data-types/TimestamptzType.js");
const TimeType_js_1 = require("./data-types/TimeType.js");
const UuidType_js_1 = require("./data-types/UuidType.js");
const VarcharType_js_1 = require("./data-types/VarcharType.js");
const definitions_js_1 = require("./definitions.js");
class DataTypeMap {
    constructor(other) {
        this._itemsByOID = {};
        this._items = [];
        if (other instanceof DataTypeMap)
            Object.assign(this._items, other._items);
    }
    get(oid) {
        return this._itemsByOID[oid];
    }
    register(...dataTypes) {
        for (const t of dataTypes) {
            this._itemsByOID[t.oid] = t;
            const i = this._items.findIndex((tt) => tt.oid === t.oid);
            if (i >= 0)
                this._items[i] = t;
            else
                this._items.push(t);
        }
    }
    determine(value) {
        if (value == null)
            return definitions_js_1.DataTypeOIDs.unknown;
        const valueIsArray = Array.isArray(value);
        for (const t of this._items) {
            if (valueIsArray) {
                if (t.elementsOID && t.isType(value[0]))
                    return t.oid;
            }
            else if (!t.elementsOID && t.isType(value))
                return t.oid;
        }
    }
}
exports.DataTypeMap = DataTypeMap;
exports.GlobalTypeMap = new DataTypeMap();
exports.GlobalTypeMap.register(BoolType_js_1.BoolType, BoolType_js_1.ArrayBoolType);
exports.GlobalTypeMap.register(Int4Type_js_1.Int4Type, Int4Type_js_1.ArrayInt4Type, Int8Type_js_1.Int8Type, Int8Type_js_1.ArrayInt8Type, Int2Type_js_1.Int2Type, Int2Type_js_1.ArrayInt2Type);
exports.GlobalTypeMap.register(Float8Type_js_1.Float8Type, Float8Type_js_1.ArrayFloat8Type, Float4Type_js_1.Float4Type, Float4Type_js_1.ArrayFloat4Type);
exports.GlobalTypeMap.register(NumericType_js_1.NumericType, NumericType_js_1.ArrayNumericType);
exports.GlobalTypeMap.register(UuidType_js_1.UuidType, UuidType_js_1.ArrayUuidType);
exports.GlobalTypeMap.register(TimestamptzType_js_1.TimestamptzType, TimestamptzType_js_1.ArrayTimestamptzType);
exports.GlobalTypeMap.register(TimestampType_js_1.TimestampType, TimestampType_js_1.ArrayTimestampType);
exports.GlobalTypeMap.register(DateType_js_1.DateType, DateType_js_1.ArrayDateType);
exports.GlobalTypeMap.register(TimeType_js_1.TimeType, TimeType_js_1.ArrayTimeType);
exports.GlobalTypeMap.register(OidType_js_1.OidType, OidType_js_1.ArrayOidType);
exports.GlobalTypeMap.register(JsonType_js_1.JsonType, JsonType_js_1.ArrayJsonType);
exports.GlobalTypeMap.register(JsonbType_js_1.JsonbType, JsonbType_js_1.ArrayJsonbType);
exports.GlobalTypeMap.register(ByteaType_js_1.ByteaType, ByteaType_js_1.ArrayByteaType);
exports.GlobalTypeMap.register(PointType_js_1.PointType, PointType_js_1.ArrayPointType);
exports.GlobalTypeMap.register(CircleType_js_1.CircleType, CircleType_js_1.ArrayCircleType);
exports.GlobalTypeMap.register(LsegType_js_1.LsegType, LsegType_js_1.ArrayLsegType);
exports.GlobalTypeMap.register(BoxType_js_1.BoxType, BoxType_js_1.ArrayBoxType);
exports.GlobalTypeMap.register(VarcharType_js_1.VarcharType, VarcharType_js_1.ArrayVarcharType);
exports.GlobalTypeMap.register(CharType_js_1.CharType, CharType_js_1.ArrayCharType);
exports.GlobalTypeMap.register({ ...VarcharType_js_1.VarcharType, name: "bpchar", oid: definitions_js_1.DataTypeOIDs.bpchar });
exports.GlobalTypeMap.register({
    ...VarcharType_js_1.ArrayVarcharType,
    name: "_bpchar",
    oid: definitions_js_1.DataTypeOIDs._bpchar,
    elementsOID: definitions_js_1.DataTypeOIDs.bpchar,
});
exports.GlobalTypeMap.register({ ...VarcharType_js_1.VarcharType, name: "name", oid: definitions_js_1.DataTypeOIDs.name });
exports.GlobalTypeMap.register({
    ...VarcharType_js_1.ArrayVarcharType,
    name: "_name",
    oid: definitions_js_1.DataTypeOIDs._name,
    elementsOID: definitions_js_1.DataTypeOIDs.name,
});
exports.GlobalTypeMap.register({ ...VarcharType_js_1.VarcharType, name: "text", oid: definitions_js_1.DataTypeOIDs.text });
exports.GlobalTypeMap.register({
    ...VarcharType_js_1.ArrayVarcharType,
    name: "_text",
    oid: definitions_js_1.DataTypeOIDs._text,
    elementsOID: definitions_js_1.DataTypeOIDs.text,
});
exports.GlobalTypeMap.register({ ...VarcharType_js_1.VarcharType, name: "xml", oid: definitions_js_1.DataTypeOIDs.xml });
exports.GlobalTypeMap.register({
    ...VarcharType_js_1.ArrayVarcharType,
    name: "_xml",
    oid: definitions_js_1.DataTypeOIDs._xml,
    elementsOID: definitions_js_1.DataTypeOIDs.xml,
});
